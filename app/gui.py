"""Tkinter UI wiring for the OCR application."""

from __future__ import annotations

import os
import signal
import sys
import threading
from pathlib import Path

import psutil
import tkinter as tk
from tkinter import filedialog, messagebox, scrolledtext, ttk

from .config_manager import load_config, save_config
from .crop_selector import CropSelectorApp
from .logger import LOGGER
from . import monitor
from . import ocr
from . import video_utils
from . import vsf


class OCRGui:
    """Primary application window and event handlers."""

    def __init__(self, flags):
        self.flags = flags
        self.root = tk.Tk()
        self.root.title("SEGG OCR Tool v1.36_Optimizer")
        self.root.geometry("622x578")

        (
            self.folder_id,
            delete_raw_texts,
            delete_texts,
            nen_raw_texts,
            self.videosubfinder_path,
            self.threads,
            self.crop_profiles,
        ) = load_config()

        self.duration = None
        self.images_dirr = ""

        self.delete_raw_texts_var = tk.BooleanVar(value=delete_raw_texts)
        self.delete_texts_var = tk.BooleanVar(value=delete_texts)
        self.nen_raw_texts_var = tk.BooleanVar(value=nen_raw_texts)
        self.create_txtimages_var = tk.BooleanVar(value=False)

        self.crop_top_var = tk.StringVar(value="0")
        self.crop_bottom_var = tk.StringVar(value="0")
        self.crop_left_var = tk.StringVar(value="0")
        self.crop_right_var = tk.StringVar(value="0")

        self._build_layout()
        LOGGER.configure(self.root, self.log_text)

        self.profile_combobox.set("Ch·ªçn profile")
        self.update_crop_values()
        self.toado_button.config(state=tk.DISABLED)

        LOGGER.log(
            "|====================CH√ö √ù QUAN TR·ªåNG====================|\n\n"
            "Vui l√≤ng c·∫•u h√¨nh tr∆∞·ªõc API b·∫±ng t√†i kho·∫£n google c·ªßa b·∫°n.\n"
            "Sau ƒë√≥ t·∫£i credentials.json ƒë·∫∑t c√πng th∆∞ m·ª•c ch∆∞∆°ng tr√¨nh.\n\n"
            "|=====================================Discord: ePubc#9826|\n"
        )

        self.root.protocol("WM_DELETE_WINDOW", self.on_exit)

    def _build_layout(self):
        button_width = 20

        subtitle_frame = tk.Frame(self.root)
        subtitle_frame.pack(pady=5, fill="x")
        tk.Label(subtitle_frame, text="T√™n file ph·ª• ƒë·ªÅ:").pack(side="left", padx=5)
        self.subtitle_entry = tk.Entry(subtitle_frame, width=58)
        self.subtitle_entry.pack(side="left", padx=5)
        self.subtitle_button = tk.Button(
            subtitle_frame,
            text="üìÇ Ch·ªçn n∆°i l∆∞u sub",
            width=button_width,
            command=self.choose_subtitle_file,
        )
        self.subtitle_button.pack(side="right", padx=5)

        images_frame = tk.Frame(self.root)
        images_frame.pack(pady=5, fill="x")
        tk.Label(images_frame, text="Th∆∞ m·ª•c ·∫£nh:").pack(side="left", padx=5)
        self.images_entry = tk.Entry(images_frame, width=59)
        self.images_entry.pack(side="left", padx=5)
        self.images_button = tk.Button(
            images_frame,
            text="üìÇ Ch·ªçn th∆∞ m·ª•c ·∫£nh",
            width=button_width,
            command=self.choose_images_directory,
        )
        self.images_button.pack(side="right", padx=5)

        video_frame = tk.Frame(self.root)
        video_frame.pack(pady=(0, 1), fill="x")
        tk.Label(video_frame, text="T·ªáp tin video:").pack(side="left", padx=5)
        self.entry_video = tk.Entry(video_frame, width=59)
        self.entry_video.pack(side="left", padx=5)

        self.toado_button = tk.Button(
            video_frame,
            text="‚ú® To·∫° ƒë·ªô",
            width=8,
            command=self.choose_video_for_crop,
        )
        self.toado_button.pack(side="right", padx=5)

        self.VSF_button = tk.Button(
            video_frame,
            text="üöÄ Ch·∫°y VSF",
            width=9,
            command=self.choose_video_file,
        )
        self.VSF_button.pack(side="right", padx=5)

        crop_frame = tk.Frame(self.root)
        crop_frame.pack(padx=10, pady=5, fill="x")
        tk.Label(crop_frame, text="Crop (Top, Bottom, Left, Right):").pack(side="left", padx=5)

        validate_command = (self.root.register(self.validate_float_input), "%d", "%P")

        self.entry_crop_top = tk.Entry(
            crop_frame,
            textvariable=self.crop_top_var,
            width=10,
            state="readonly",
            validate="key",
            validatecommand=validate_command,
        )
        self.entry_crop_top.pack(side="left", padx=2)

        self.entry_crop_bottom = tk.Entry(
            crop_frame,
            textvariable=self.crop_bottom_var,
            width=10,
            state="readonly",
            validate="key",
            validatecommand=validate_command,
        )
        self.entry_crop_bottom.pack(side="left", padx=2)

        self.entry_crop_left = tk.Entry(
            crop_frame,
            textvariable=self.crop_left_var,
            width=10,
            state="readonly",
            validate="key",
            validatecommand=validate_command,
        )
        self.entry_crop_left.pack(side="left", padx=2)

        self.entry_crop_right = tk.Entry(
            crop_frame,
            textvariable=self.crop_right_var,
            width=10,
            state="readonly",
            validate="key",
            validatecommand=validate_command,
        )
        self.entry_crop_right.pack(side="left", padx=2)

        self.profile_combobox = ttk.Combobox(
            crop_frame,
            values=["Ch·ªçn profile", "vlxx, javhd", "sextop", "phimKK", "titdam", "Tu·ª≥ ch·ªânh"],
            state="readonly",
        )
        self.profile_combobox.pack(side="left", padx=5)
        self.profile_combobox.bind("<<ComboboxSelected>>", self.update_crop_values)

        delete_options_frame = tk.Frame(self.root)
        delete_options_frame.pack(pady=(0, 1), fill="x")

        tk.Checkbutton(
            delete_options_frame,
            text="X√≥a folder raw_texts khi xong",
            variable=self.delete_raw_texts_var,
            anchor="w",
        ).pack(side="left", padx=5)

        tk.Checkbutton(
            delete_options_frame,
            text="X√≥a folder texts khi xong",
            variable=self.delete_texts_var,
            anchor="w",
        ).pack(side="left", padx=5)

        tk.Checkbutton(
            delete_options_frame,
            text="N√©n folder raw_texts",
            variable=self.nen_raw_texts_var,
            anchor="w",
        ).pack(side="left", padx=5)

        tk.Checkbutton(
            delete_options_frame,
            text="T·∫°o TXTImages",
            variable=self.create_txtimages_var,
            anchor="w",
        ).pack(side="left", padx=5)

        button_frame = tk.Frame(self.root)
        button_frame.pack(pady=(0, 2), fill="x")

        self.start_button = tk.Button(
            button_frame,
            text="üé¨ B·∫Øt ƒë·∫ßu OCR",
            width=12,
            command=self.on_start_button_click,
            bg="#F50398",
        )
        self.start_button.pack(side="left", padx=5)

        self.stop_button = tk.Button(
            button_frame,
            text="‚ùå D·ª´ng OCR",
            width=11,
            command=lambda: ocr.stop_processing(self),
            state=tk.DISABLED,
        )
        self.stop_button.pack(side="left", padx=2)

        self.status_label = tk.Label(button_frame, text="Tr·∫°ng th√°i ch∆∞∆°ng tr√¨nh: S·∫µn s√†ng", fg="red")
        self.status_label.pack(side="right", padx=2)

        self.progress_bar = ttk.Progressbar(self.root, orient="horizontal", length=612, mode="determinate")
        self.progress_bar.pack(pady=(1, 0))

        log_frame = tk.Frame(self.root)
        log_frame.pack(pady=(0, 5), fill="both", expand=True)
        self.log_text = tk.Text(log_frame, height=5, wrap="word", state="disabled", bg="#0C0C0C", fg="#CCCCCC")
        self.log_text.pack(fill="both", expand=True, padx=5, pady=5)

    def validate_float_input(self, action, value):
        if action != "1":
            return True
        return value.replace(".", "", 1).isdigit()

    def set_entries_state(self, state):
        self.entry_crop_top.config(state=state)
        self.entry_crop_bottom.config(state=state)
        self.entry_crop_left.config(state=state)
        self.entry_crop_right.config(state=state)

    def update_crop_values(self, event=None, top=None, bottom=None, left=None, right=None):
        if top is not None:
            self.crop_top_var.set(f"{top:.4f}")
        if bottom is not None:
            self.crop_bottom_var.set(f"{bottom:.4f}")
        if left is not None:
            self.crop_left_var.set(f"{left:.4f}")
        if right is not None:
            self.crop_right_var.set(f"{right:.4f}")

        selected_profile = self.profile_combobox.get()
        if selected_profile in self.crop_profiles:
            profile = self.crop_profiles[selected_profile]
            self.crop_top_var.set(f"{profile['top']:.4f}")
            self.crop_bottom_var.set(f"{profile['bottom']:.4f}")
            self.crop_left_var.set(f"{profile['left']:.4f}")
            self.crop_right_var.set(f"{profile['right']:.4f}")
            self.set_entries_state("readonly")
            self.toado_button.config(state=tk.DISABLED)
            self.VSF_button.config(state=tk.NORMAL)
        elif selected_profile == "Tu·ª≥ ch·ªânh":
            self.set_entries_state("normal")
            self.toado_button.config(state=tk.NORMAL)
            self.VSF_button.config(state=tk.DISABLED if not self.entry_video.get() else tk.NORMAL)
        else:
            self.set_entries_state("readonly")

    def choose_images_directory(self):
        images_dirr = filedialog.askdirectory(title="Ch·ªçn th∆∞ m·ª•c ch·ª©a h√¨nh ·∫£nh")
        if images_dirr:
            self.images_entry.delete(0, tk.END)
            self.images_entry.insert(0, images_dirr)
            LOGGER.log(f"‚úÖ ƒê∆∞·ªùng d·∫´n th∆∞ m·ª•c ƒë√£ ch·ªçn: {images_dirr}")
        else:
            LOGGER.log("‚ö†Ô∏è Kh√¥ng c√≥ th∆∞ m·ª•c n√†o ƒë∆∞·ª£c ch·ªçn.")

    def choose_subtitle_file(self):
        subtitle_file = filedialog.asksaveasfilename(
            defaultextension=".srt",
            filetypes=[("SRT files", "*.srt")],
            title="L∆∞u file ph·ª• ƒë·ªÅ",
        )
        if subtitle_file:
            self.subtitle_entry.delete(0, tk.END)
            self.subtitle_entry.insert(0, subtitle_file)
            LOGGER.log(f"‚úÖ N∆°i l∆∞u ph·ª• ƒë·ªÅ: {subtitle_file}")
        else:
            LOGGER.log("‚ö†Ô∏è B·∫ÆT BU·ªòC PH·∫¢I CH·ªåN L∆ØU PH·ª§ ƒê·ªÄ.")

    def _get_custom_crop(self):
        try:
            return {
                "top": float(self.crop_top_var.get()),
                "bottom": float(self.crop_bottom_var.get()),
                "left": float(self.crop_left_var.get()),
                "right": float(self.crop_right_var.get()),
            }
        except ValueError:
            return None

    def on_start_button_click(self):
        file_sub = self.subtitle_entry.get()
        images_dirr = self.images_entry.get()

        if not file_sub or not images_dirr:
            LOGGER.log("‚ö†Ô∏è Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin...")
            messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin.")
            return

        custom_crop = self._get_custom_crop()
        save_config(
            self.folder_id,
            self.delete_raw_texts_var.get(),
            self.delete_texts_var.get(),
            self.nen_raw_texts_var.get(),
            self.videosubfinder_path,
            self.threads,
            self.crop_profiles,
            custom_crop=custom_crop,
        )

        log_file_path = file_sub if file_sub.endswith(".srt") else f"{file_sub}.srt"
        log_file_path = log_file_path.replace(".srt", ".log")
        LOGGER.set_log_file(log_file_path)

        LOGGER.log("üé¨ B·∫Øt ƒë·∫ßu qu√° tr√¨nh x·ª≠ l√Ω...")

        self.start_button.config(state=tk.DISABLED)
        self.stop_button.config(state=tk.NORMAL)
        self.VSF_button.config(state=tk.DISABLED)
        self.subtitle_button.config(state=tk.DISABLED)
        self.images_button.config(state=tk.DISABLED)
        self.progress_bar["value"] = 0

        threading.Thread(
            target=ocr.start_processing,
            args=(
                self,
                file_sub,
                images_dirr,
                self.delete_raw_texts_var.get(),
                self.delete_texts_var.get(),
                self.nen_raw_texts_var.get(),
                self.flags,
            ),
            daemon=True,
        ).start()

    def choose_video_file(self):
        selected_profile = self.profile_combobox.get()
        video_file = None

        if selected_profile != "Tu·ª≥ ch·ªânh" or not self.entry_video.get():
            video_file = filedialog.askopenfilename(
                filetypes=[("Video files", "*.mp4 *.avi *.mov *.mkv")],
                title="Ch·ªçn video ƒë·ªÉ x·ª≠ l√Ω",
            )
            if not video_file:
                LOGGER.log("‚ö†Ô∏è Kh√¥ng c√≥ video n√†o ƒë∆∞·ª£c ch·ªçn.")
                return
            self.entry_video.delete(0, tk.END)
            self.entry_video.insert(0, video_file)
        else:
            video_file = self.entry_video.get()

        LOGGER.log(f"‚úÖ ƒê√£ ch·ªçn video: {video_file}")

        self.duration = video_utils.get_video_duration_opencv(video_file)
        if self.duration:
            self.status_label.config(text=f"‚è≥ Th·ªùi l∆∞·ª£ng Video: | {self.duration}")
        else:
            self.status_label.config(text="‚è≥ ƒêang x·ª≠ l√Ω")

        subtitle_file = Path(video_file).with_suffix(".srt")
        self.subtitle_entry.delete(0, tk.END)
        self.subtitle_entry.insert(0, str(subtitle_file))

        try:
            crop_left = float(self.entry_crop_left.get())
            crop_right = float(self.entry_crop_right.get())
            crop_top = float(self.entry_crop_top.get())
            crop_bottom = float(self.entry_crop_bottom.get())
        except ValueError:
            LOGGER.log("‚ùå L·ªói nh·∫≠p li·ªáu: Vui l√≤ng nh·∫≠p ƒë√∫ng gi√° tr·ªã s·ªë cho c√°c tham s·ªë crop.")
            messagebox.showerror("L·ªói nh·∫≠p li·ªáu", "Vui l√≤ng nh·∫≠p ƒë√∫ng gi√° tr·ªã s·ªë cho c√°c tham s·ªë crop.")
            return

        if not os.path.exists(self.videosubfinder_path):
            LOGGER.log(f"‚ùå L·ªói: Kh√¥ng t√¨m th·∫•y VideoSubFinder t·∫°i: {self.videosubfinder_path}")
            messagebox.showerror("L·ªói", f"Kh√¥ng t√¨m th·∫•y VideoSubFinder t·∫°i: {self.videosubfinder_path}")
            return

        output_base = str(Path(video_file).with_suffix("")) + "_out"
        output_folder = "TXTImages" if self.create_txtimages_var.get() else "RGBImages"

        command = vsf.build_command(
            self.videosubfinder_path,
            video_file,
            output_base,
            crop_top,
            crop_bottom,
            crop_left,
            crop_right,
            self.create_txtimages_var.get(),
        )

        self.VSF_button.config(state=tk.DISABLED)
        self.start_button.config(state=tk.DISABLED)
        self.subtitle_button.config(state=tk.DISABLED)
        self.images_button.config(state=tk.DISABLED)

        vsf.run_vsf(self, command, output_base, output_folder)

    def _apply_video_after_crop(self, video_path: str):
        self.entry_video.delete(0, tk.END)
        self.entry_video.insert(0, video_path)
        self.profile_combobox.set("Tu·ª≥ ch·ªânh")
        self.update_crop_values()
        self.choose_video_file()

    def choose_video_for_crop(self):
        video_file = filedialog.askopenfilename(
            filetypes=[("Video files", "*.mp4 *.avi *.mov *.mkv")],
            title="Ch·ªçn video ƒë·ªÉ ch·ªçn t·ªça ƒë·ªô",
        )
        if not video_file:
            return

        self.profile_combobox.set("Tu·ª≥ ch·ªânh")
        self.update_crop_values()

        crop_window = tk.Toplevel(self.root)
        CropSelectorApp(
            crop_window,
            video_file,
            self.update_crop_values,
            self.profile_combobox.get,
            self._apply_video_after_crop,
        )

        crop_window.update_idletasks()
        x = self.root.winfo_x() + (self.root.winfo_width() - crop_window.winfo_width()) // 2
        y = self.root.winfo_y() + (self.root.winfo_height() - crop_window.winfo_height()) // 2
        crop_window.geometry(f"+{x}+{y}")
        crop_window.attributes("-topmost", True)
        self.root.wait_window(crop_window)

    def on_exit(self):
        if not messagebox.askokcancel("X√°c nh·∫≠n tho√°t", "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën tho√°t ch∆∞∆°ng tr√¨nh?"):
            return

        LOGGER.log("‚úÖ Ch∆∞∆°ng tr√¨nh ƒë√£ ƒë∆∞·ª£c ƒë√≥ng.")

        monitor.STATE.stop_all()

        for process in psutil.process_iter(attrs=["pid", "name"]):
            if "VideoSubFinderWXW_intel.exe" in process.info["name"]:
                try:
                    LOGGER.log("‚ö†Ô∏è ƒêang ƒë√≥ng VideoSubFinderWXW_intel.exe...")
                    os.kill(process.info["pid"], signal.SIGTERM)
                    LOGGER.log("‚úÖ ƒê√£ ƒë√≥ng VideoSubFinderWXW_intel.exe th√†nh c√¥ng!")
                except Exception as exc:
                    LOGGER.log(f"‚ùå L·ªói khi ƒë√≥ng VideoSubFinderWXW_intel.exe: {exc}")

        self.root.destroy()
        sys.exit(0)

    def run(self):
        self.root.mainloop()
